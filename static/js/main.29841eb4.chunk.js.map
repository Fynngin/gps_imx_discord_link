{"version":3,"sources":["connectBtnStyle.module.css","DiscordProfile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","DiscordProfile","user","style","width","height","borderRadius","src","id","avatar","alt","username","PageStatus","App","useState","discordUser","setDiscordUser","Initializing","pageStatus","setPageStatus","kolectivUsername","setKolectivUsername","a","startImxProcess","then","address","ImxConnected","verifyUser","catch","ImxError","Link","setup","imxAddress","userId","axios","url","data","JSON","stringify","kolectivUser","method","headers","RoleGranted","response","error","err_code","EthAddrDoesntMatchKolectiv","NoAssets","KolectivUserNotFound","DiscordError","RoleGrantingError","useEffect","fragment","URLSearchParams","window","location","hash","slice","get","accessToken","tokenType","fetch","authorization","result","json","DiscordConnected","console","className","includes","onSubmit","handleConnectButtonClick","styles","kolectiv_input","required","type","placeholder","onChange","e","target","value","square_btn","connectBtnText","imx_logo","process","switchContents","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29841eb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"square_btn\":\"connectBtnStyle_square_btn__30eW1\",\"connectBtnText\":\"connectBtnStyle_connectBtnText__2YAB3\",\"imx_logo\":\"connectBtnStyle_imx_logo__1wECb\",\"kolectiv_input\":\"connectBtnStyle_kolectiv_input__1hnfw\"};","export interface DiscordUser {\r\n    accent_color?: string\r\n    avatar: string\r\n    banner?: string\r\n    banner_color?: string\r\n    discriminator: string\r\n    flags: number\r\n    id: string\r\n    locale: string\r\n    mfa_enabled: boolean\r\n    public_flags: number\r\n    username:  string\r\n}\r\n\r\nexport default function DiscordProfile({user}: {user: DiscordUser}) {\r\n    const avatarStyles = {\r\n        width: '150px',\r\n        height: '150px',\r\n        borderRadius: '100%'\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <img style={avatarStyles} src={`https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png`} alt='User Avatar'/>\r\n            <h2>Hello {user.username}</h2>\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport { Link } from '@imtbl/imx-sdk';\nimport { useEffect, useState } from 'react';\nimport DiscordProfile, { DiscordUser } from './DiscordProfile';\nimport styles from './connectBtnStyle.module.css';\nimport axios from 'axios';\n\nenum PageStatus {\n  Initializing,\n  DiscordError,\n  DiscordConnected,\n  ImxError,\n  ImxConnected,\n  RoleGrantingError,\n  RoleGranted,\n  EthAddrDoesntMatchKolectiv,\n  NoAssets,\n  KolectivUserNotFound\n}\n\nfunction App() {\n  const [discordUser, setDiscordUser] = useState({} as DiscordUser);\n  const [pageStatus, setPageStatus] = useState(PageStatus.Initializing);\n  const [kolectivUsername, setKolectivUsername] = useState('');\n\n  async function handleConnectButtonClick() {\n    startImxProcess().then(({address}) => {\n      setPageStatus(PageStatus.ImxConnected);\n      verifyUser(address, discordUser.id);\n    }).catch(() => {\n      setPageStatus(PageStatus.ImxError);\n    })\n\n  }\n\n  function startImxProcess(): Promise<{address: string, starkPublicKey: string}> {\n    const link = new Link('https://link.x.immutable.com');\n    return link.setup({});\n  }\n\n  async function verifyUser(imxAddress: string, userId: string) {\n    await axios({\n      url: `https://fynngin.api.stdlib.com/greenpark-nft-verification@dev/nft_role_grant`,\n      data: JSON.stringify({\n        user: userId,\n        address: imxAddress,\n        kolectivUser: kolectivUsername\n      }),\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(() => {\n      setPageStatus(PageStatus.RoleGranted);\n    }).catch(({ response }) => {\n      const err_code = response.data.error.err_code;\n      switch(err_code) {\n        case 'eth_addr_no_match':\n          setPageStatus(PageStatus.EthAddrDoesntMatchKolectiv);\n          break;\n        case 'no_assets':\n          setPageStatus(PageStatus.NoAssets);\n          break;\n        case 'no_imx_address':\n          setPageStatus(PageStatus.ImxError);\n          break;\n        case 'kolectiv_user_not_found':\n          setPageStatus(PageStatus.KolectivUserNotFound);\n          break;\n        case 'no_discord_user':\n          setPageStatus(PageStatus.DiscordError);\n          break;\n        default:\n          setPageStatus(PageStatus.RoleGrantingError);\n      }\n    })\n  }\n\n\n  useEffect(() => {\n    // parse access_token and token_type that were inserted by Discord into redirect URL\n    const fragment = new URLSearchParams(window.location.hash.slice(1));\n    const [accessToken, tokenType] = [fragment.get('access_token'), fragment.get('token_type')];\n    const fetchUsers = () => {\n        fetch('https://discord.com/api/users/@me', {\n          headers: {\n            authorization: `${tokenType} ${accessToken}`,\n          },\n        })\n        .then(result => result.json())\n        .then(response => {\n          setDiscordUser(response);\n          setPageStatus(PageStatus.DiscordConnected)\n        })\n        .catch(() => {\n          setPageStatus(PageStatus.DiscordError);\n          console.error()\n        });\n    };\n\n    if (accessToken) {\n      fetchUsers();\n    } else {\n      setPageStatus(PageStatus.DiscordError);\n    }\n  }, []);\n\n  function switchContents() {\n    switch (pageStatus) {\n      case PageStatus.Initializing:\n        return(<p>Getting discord information...</p>)\n      case PageStatus.DiscordError:\n        return(<p>There was an error linking your Discord account. Please try again.</p>)\n      case PageStatus.DiscordConnected:\n        return(\n          <>\n            <DiscordProfile user={discordUser}/>\n            <form onSubmit={() => handleConnectButtonClick()}>\n              <div>\n                <input \n                  className={styles.kolectiv_input} \n                  required \n                  type='text' \n                  id='kolectiv-input' \n                  placeholder='Kolectiv Username'\n                  onChange={e => setKolectivUsername(e.target.value)}\n                />\n              </div>\n\n              <div>\n                <button type='submit' className={styles.square_btn} >\n                  <h2 className={styles.connectBtnText}>Connect</h2>\n                  <img className={styles.imx_logo} src={`${process.env.PUBLIC_URL}/imx_logo.svg`} alt='ImmutableX Logo'/>\n                </button>\n              </div>\n            </form>\n          </>\n        )\n      case PageStatus.ImxError:\n        return(<p>There was an error linking your Immutable Wallet. Please try again.</p>)\n      case PageStatus.ImxConnected:\n        return(<p>Immutable Wallet connected! Checking assets and granting the role...</p>)\n      case PageStatus.RoleGrantingError:\n        return(<p>Couldn't grant the Discord Role. Do you own a Greenpark NFT?</p>)\n      case PageStatus.KolectivUserNotFound:\n        return(<p>We couldn't find that Kolectiv user :( Maybe a typo?</p>)\n      case PageStatus.EthAddrDoesntMatchKolectiv:\n        return(<p>Your Ethereum Address doesn't match the given Kolectiv user.</p>)\n      case PageStatus.NoAssets:\n        return(<p>Seems like you don't own any Greenpark NFTs :(</p>)\n      case PageStatus.RoleGranted:\n        return(<p>Role successfully granted! Enjoy :)</p>)\n      default:\n        return(<p>An unknown error occured. Please try again.</p>);\n    }\n  }\n\n  function pageStatusIsComplete() {\n    return [PageStatus.NoAssets, PageStatus.RoleGranted].includes(pageStatus);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {pageStatusIsComplete() ? <p>Wallet linked!</p> : <></>}\n        {switchContents()}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}